<?php
/**
 * Created by PhpStorm.
 * User: aris
 * Date: 15/3/19
 * Time: 2:12 PM
 */

namespace integration;

use Faker\Factory;
use ReflectionClass;
use DataNoodle\Service;
use PHPUnit\Framework\TestCase;
use Dotenv\Exception\InvalidPathException;

class IntegrationService extends Service
{
    public function processSuccess()
    {
        // TODO: Implement processSuccess() method.
    }

    public function setHost()
    {
        $this->host = 'localhost';
    }

    public function setPort()
    {
        $this->port = 5672;
    }

    public function getHost()
    {
        return $this->host;
    }

    public function setVHost()
    {
        $this->vhost = '/';
    }

    public function getPort()
    {
        return $this->port;
    }

    public function getEnvVariables()
    {
        $this->setHost();
        $this->setPort();
        $this->setUser();
        $this->setPass();
        $this->setVHost();
    }

    public function setExchange($exchange, $type = 'topic', $passive = false, $durable = true, $auto_delete = false)
    {
        parent::setExchange($exchange, $type, $passive, $durable, $auto_delete); // TODO: Change the autogenerated stub
    }

    public function setUser()
    {
        $this->user = 'guest';
    }

    public function setPass()
    {
        $this->pass = 'guest';
    }

    public function getExchange()
    {
        return $this->exchange;
    }

    public function setQueue(
        $queue,
        $passive = false,
        $durable = true,
        $exclusive = false,
        $auto_delete = false,
        $nowait = false
    ) {
        parent::setQueue(
            $queue,
            $passive,
            $durable,
            $exclusive,
            $auto_delete,
            $nowait
        ); // TODO: Change the autogenerated stub
    }

    public function getQueue()
    {
        return $this->queue;
    }
}

class ServiceCoreIntegrationTest extends TestCase
{

    private $faker;

    public function __construct(?string $name = null, array $data = [], string $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        $this->faker = Factory::create();
    }

    public function testNoNameService()
    {
        try {
            $service = new IntegrationService();
        } catch (\ArgumentCountError $e) {
            $this->assertInstanceOf(\ArgumentCountError::class, $e);
        }
    }

    public function testCreateServiceWithOutEnv()
    {
        try {
            $name = $this->faker->company;
            $service = new IntegrationService($name);
        } catch (InvalidPathException $e) {
            $this->assertInstanceOf(InvalidPathException::class, $e);
        }
    }

    public function testCreateServiceWithEnv()
    {
        try {
            $name = $this->faker->company;
            $service = $this->getMockBuilder(IntegrationService::class)->setConstructorArgs([$name])->setMethods([
                '__construct',
                'runService',
            ])->disableOriginalConstructor()->getMock();

            // We've overloaded the getEnvVariables so we definetely get the right username/password without the env file
            $service->getEnvVariables();

            $this->assertEquals('localhost', $service->getHost());

            $this->assertEquals(5672, $service->getPort());

            $service->method('runService')->willReturn(true);

            $result = $service->connect();

            $this->assertEquals(null, $result);
        } catch (\ErrorException $e) {
        }
    }

    public function setProtectedProperty($object, $property, $value)
    {
        $reflection = new ReflectionClass($object);
        $reflection_property = $reflection->getProperty($property);
        $reflection_property->setAccessible(true);
        $reflection_property->setValue($object, $value);
    }


    public function setEnvVariables($service)
    {
        $service->getEnvVariables();
    }

    public function testRunService()
    {
        try {
            $name = $this->faker->company;
            $service = $this->getMockBuilder(IntegrationService::class)->setConstructorArgs([$name])->setMethods([
                '__construct',
                'setExchange',
                'runService',
            ])->disableOriginalConstructor()->getMock();

            // We've overloaded the getEnvVariables so we definetely get the right username/password without the env file
            $service->getEnvVariables();


            $this->assertEquals('localhost', $service->getHost());

            $this->assertEquals(5672, $service->getPort());

            $this->setProtectedProperty($service, 'exchange', 'svc.data');

            $this->assertEquals('svc.data', $service->getExchange());

            $service->setQueue('queuetest');

            $service->bindQueue('routing_key');

            $this->assertEquals('queuetest', $service->getQueue());

            $service->method('runService')->willReturn(true);

            $this->assertTrue($service->runService());
        } catch (\ErrorException $e) {
        }
    }
}
